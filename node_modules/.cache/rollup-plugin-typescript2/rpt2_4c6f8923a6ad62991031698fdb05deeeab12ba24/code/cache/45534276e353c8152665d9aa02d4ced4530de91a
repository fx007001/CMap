{"code":"export function initBMap() {\r\n    const BMapGL = window.BMapGL || {}, BMapGLLib = window.BMapGLLib || {};\r\n    const { id, points = [116.404, 39.915], areaName, poiText = true, //是否显示POI信息 \r\n    poiIcon = true, //是否显示POI图标信息 \r\n    zoom = 10, drivingPath = [], enableScrollWheel = false, isScaleCtrl = false, isZoomCtrl = false, navi3DCtrl = false, // 添加3D控件\r\n    enclosure = {}, drivingType } = this.$options;\r\n    const map = new BMapGL.Map(id);\r\n    const point = this.$options.points && points.length === 2 ? new BMapGL.Point(points[0], points[1]) : null;\r\n    map.centerAndZoom(point !== null && point !== void 0 ? point : areaName, zoom);\r\n    map.enableScrollWheelZoom(enableScrollWheel);\r\n    map.setDisplayOptions({\r\n        poiText,\r\n        poiIcon\r\n    });\r\n    // 添加3D控件\r\n    if (navi3DCtrl) {\r\n        const ctrl3D = new BMapGL.NavigationControl3D();\r\n        map.addControl(ctrl3D);\r\n    }\r\n    // 添加比例尺控件\r\n    if (isScaleCtrl) {\r\n        const scaleCtrl = new BMapGL.ScaleControl();\r\n        map.addControl(scaleCtrl);\r\n    }\r\n    // 添加缩放控件\r\n    if (isZoomCtrl) {\r\n        const zoomCtrl = new BMapGL.ZoomControl();\r\n        map.addControl(zoomCtrl);\r\n    }\r\n    // 轨迹配置\r\n    if (drivingPath && drivingPath.length >= 2) {\r\n        const startPints = [drivingPath[0].lng, drivingPath[0].lat];\r\n        const endPints = [drivingPath.at(-1).lng, drivingPath.at(-1).lat];\r\n        // 起始结束点位计算路径\r\n        if (drivingType && drivingType === 'path') {\r\n            const start = new BMapGL.Point(startPints[0], startPints[1]);\r\n            const end = new BMapGL.Point(endPints[0], endPints[1]);\r\n            const driving = new BMapGL.DrivingRoute(map, {\r\n                renderOptions: {\r\n                    map: map,\r\n                    autoViewport: true\r\n                }\r\n            });\r\n            driving.search(start, end);\r\n        }\r\n        else {\r\n            map.centerAndZoom(new BMapGL.Point(startPints[0], startPints[1]));\r\n            let point = [];\r\n            for (let i = 0; i < drivingPath.length; i++) {\r\n                point.push(new BMapGL.Point(drivingPath[i].lng, drivingPath[i].lat));\r\n            }\r\n            const pl = new BMapGL.Polyline(point, {\r\n                strokeColor: \"#6699FF\",\r\n                strokeWeight: 6,\r\n            });\r\n            const markerST = new BMapGL.Marker(new BMapGL.Point(startPints[0], startPints[1]), {\r\n                title: '起点'\r\n            });\r\n            const markerEND = new BMapGL.Marker(new BMapGL.Point(endPints[0], endPints[1]), {\r\n                title: '终点'\r\n            });\r\n            setTimeout(function () {\r\n                const trackAni = new BMapGLLib.TrackAnimation(map, pl, {\r\n                    overallView: true,\r\n                    tilt: 30,\r\n                    duration: 4000,\r\n                    delay: 300 // 动画开始的延迟，默认0，单位ms\r\n                });\r\n                trackAni.start();\r\n                map.addOverlay(markerST);\r\n                map.addOverlay(markerEND);\r\n            }, 1000);\r\n        }\r\n    }\r\n    // 围栏配置\r\n    if ((enclosure && enclosure.type === 'circle') || enclosure && enclosure.point) {\r\n        const { fillColor = \"#6699FF\", fillOpacity = 0.3, strokeColor = \"#6699FF\", strokeWeight = 2, strokeOpacity = 1, point, radius } = enclosure;\r\n        const circle = new BMapGL.Circle(new BMapGL.Point(point[0], point[1]), radius, {\r\n            fillColor,\r\n            fillOpacity,\r\n            strokeColor,\r\n            strokeWeight,\r\n            strokeOpacity,\r\n        });\r\n        map.addOverlay(circle); // 添加到地图中\r\n    }\r\n    else if (enclosure && enclosure.points || enclosure && enclosure.type === 'polygon') {\r\n        const { fillColor = \"#6699FF\", fillOpacity = 0.3, strokeColor = \"#6699FF\", strokeWeight = 2, strokeOpacity = 1, points = [] } = enclosure;\r\n        let pl = [];\r\n        for (let i = 0; i < points.length; i++) {\r\n            pl.push(new BMapGL.Point(points[i].lng, points[i].lat));\r\n        }\r\n        const polygon = new BMapGL.Polygon(pl, {\r\n            fillColor,\r\n            fillOpacity,\r\n            strokeColor,\r\n            strokeWeight,\r\n            strokeOpacity\r\n        });\r\n        map.addOverlay(polygon);\r\n    }\r\n}\r\n","references":[]}
