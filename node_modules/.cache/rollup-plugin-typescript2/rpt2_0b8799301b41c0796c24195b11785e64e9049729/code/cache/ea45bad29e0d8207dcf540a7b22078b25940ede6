{"code":"import { __spreadArray } from \"tslib\";\r\nexport function initTMap() {\r\n    var TMap = window.TMap || {};\r\n    var _a = this.$options, _b = _a.id, id = _b === void 0 ? 'map' : _b, _c = _a.points, points = _c === void 0 ? [116.307503, 39.984104] : _c, _d = _a.zoom, zoom = _d === void 0 ? 10 : _d, _e = _a.isScaleCtrl, isScaleCtrl = _e === void 0 ? false : _e, _f = _a.isZoomCtrl, isZoomCtrl = _f === void 0 ? false : _f, _g = _a.navi3DCtrl, navi3DCtrl = _g === void 0 ? false : _g, _h = _a.drivingPath, drivingPath = _h === void 0 ? [] : _h, _j = _a.enclosure, enclosure = _j === void 0 ? {} : _j;\r\n    var center = new TMap.LatLng(points[1], points[0]);\r\n    var map = new TMap.Map(document.getElementById(id), {\r\n        center: center,\r\n        zoom: zoom,\r\n        // pitch: 43.5, //设置俯仰角\r\n        // rotation: 45 //设置地图旋转角度\r\n    });\r\n    // 默认是开启的-可以选择关闭\r\n    if (!isZoomCtrl) {\r\n        map.removeControl(TMap.constants.DEFAULT_CONTROL_ID.ZOOM);\r\n    }\r\n    /** 控件\r\n     * CONTROL_POSITION\r\n     * DEFAULT_CONTROL_ID： SCALE 、FLOOR、LOGO、ROTATION、SCALE、ZOOM\r\n     * **/\r\n    if (!isScaleCtrl) {\r\n        map.removeControl(TMap.constants.DEFAULT_CONTROL_ID.SCALE);\r\n    }\r\n    if (!navi3DCtrl) {\r\n        map.removeControl(TMap.constants.DEFAULT_CONTROL_ID.ROTATION);\r\n    }\r\n    if (drivingPath && drivingPath.length >= 2) {\r\n        var path_1 = [];\r\n        drivingPath.forEach(function (it) {\r\n            path_1.push(new TMap.LatLng(it.lat, it.lng));\r\n        });\r\n        var lastPoint = drivingPath.at(-1);\r\n        var startPosition = new TMap.LatLng(drivingPath[0].lat, drivingPath[0].lng);\r\n        var endPosition = new TMap.LatLng(lastPoint.lat, lastPoint.lng);\r\n        new TMap.MultiMarker({\r\n            // 创造MultiMarker显示起终点标记\r\n            id: 'marker-layer',\r\n            map: map,\r\n            styles: {\r\n                start: new TMap.MarkerStyle({\r\n                    width: 25,\r\n                    height: 35,\r\n                    anchor: {\r\n                        x: 16,\r\n                        y: 32\r\n                    },\r\n                    src: 'https://mapapi.qq.com/web/lbs/javascriptGL/demo/img/start.png',\r\n                }),\r\n                end: new TMap.MarkerStyle({\r\n                    width: 25,\r\n                    height: 35,\r\n                    anchor: {\r\n                        x: 16,\r\n                        y: 32\r\n                    },\r\n                    src: 'https://mapapi.qq.com/web/lbs/javascriptGL/demo/img/end.png',\r\n                }),\r\n            },\r\n            geometries: [{\r\n                    id: 'start',\r\n                    styleId: 'start',\r\n                    position: startPosition,\r\n                },\r\n                {\r\n                    id: 'end',\r\n                    styleId: 'end',\r\n                    position: endPosition,\r\n                },\r\n            ],\r\n        });\r\n        // 创建 MultiPolyline显示路径折线\r\n        new TMap.MultiPolyline({\r\n            id: 'polyline-layer',\r\n            map: map,\r\n            styles: {\r\n                style_blue: new TMap.PolylineStyle({\r\n                    color: '#3777FF',\r\n                    width: 6,\r\n                    lineCap: 'round',\r\n                }),\r\n            },\r\n            geometries: [{\r\n                    id: 'pl_1',\r\n                    styleId: 'style_blue',\r\n                    paths: path_1,\r\n                },],\r\n        });\r\n        setCenterAndZoom(getAreaAndCent(path_1));\r\n    }\r\n    //多边形区域\r\n    if (enclosure && enclosure.points) {\r\n        var points_1 = enclosure.points, radius = enclosure.radius, strokeColor = enclosure.strokeColor, strokeWeight = enclosure.strokeWeight;\r\n        var path_2 = [];\r\n        points_1.forEach(function (it) {\r\n            path_2.push(new TMap.LatLng(it.lat, it.lng));\r\n        });\r\n        new TMap.MultiPolygon({\r\n            id: 'polygon-layer',\r\n            map: map,\r\n            styles: {\r\n                'polygon': new TMap.PolygonStyle({\r\n                    'color': 'rgba(0,125,255,0.3)',\r\n                    'showBorder': true,\r\n                    'borderColor': strokeColor || '#6699FF' //边线颜色\r\n                })\r\n            },\r\n            geometries: [{\r\n                    'id': 'polygon',\r\n                    'styleId': 'polygon',\r\n                    'paths': path_2,\r\n                    'properties': {\r\n                        'title': 'polygon'\r\n                    }\r\n                }]\r\n        });\r\n        setCenterAndZoom(getAreaAndCent(path_2));\r\n        map.setCenter(path_2[0]);\r\n    }\r\n    // 圆形围栏\r\n    if (enclosure && enclosure.point) {\r\n        var point = enclosure.point, radius = enclosure.radius, strokeColor = enclosure.strokeColor, strokeWeight = enclosure.strokeWeight;\r\n        var TMapCent = new TMap.LatLng(point[1], point[0]);\r\n        new TMap.MultiCircle({\r\n            map: map,\r\n            styles: {\r\n                'circle': new TMap.CircleStyle({\r\n                    'color': 'rgba(41,91,255,0.3)',\r\n                    'showBorder': true,\r\n                    'borderColor': strokeColor || 'rgba(41,91,255,1)',\r\n                    'borderWidth': strokeWeight,\r\n                }),\r\n            },\r\n            geometries: [{\r\n                    styleId: 'circle',\r\n                    center: TMapCent,\r\n                    radius: radius,\r\n                }],\r\n        });\r\n        setCenterAndZoom({ distance: radius * 2, cent: TMapCent });\r\n    }\r\n    // 计算最大区域以及 区域中心点\r\n    function getAreaAndCent(path) {\r\n        var startPoint = [], endPoint = [], rt = [], lb = [];\r\n        path.forEach(function (it) {\r\n            if (startPoint[0] === undefined || startPoint[0] < it.lat) {\r\n                startPoint[0] = it.lat;\r\n            }\r\n            if (startPoint[1] === undefined || startPoint[1] > it.lng) {\r\n                startPoint[1] = it.lng;\r\n            }\r\n            if (endPoint[0] === undefined || endPoint[0] > it.lat) {\r\n                endPoint[0] = it.lat;\r\n            }\r\n            if (endPoint[1] === undefined || endPoint[1] < it.lng) {\r\n                endPoint[1] = it.lng;\r\n            }\r\n            if (rt[0] === undefined || rt[0] < it.lat) {\r\n                rt[0] = it.lat;\r\n            }\r\n            if (rt[1] === undefined || rt[1] < it.lng) {\r\n                rt[1] = it.lng;\r\n            }\r\n            if (lb[0] === undefined || lb[0] > it.lat) {\r\n                lb[0] = it.lat;\r\n            }\r\n            if (lb[1] === undefined || lb[1] > it.lng) {\r\n                lb[1] = it.lng;\r\n            }\r\n        });\r\n        var pointSE = [\r\n            new TMap.LatLng(startPoint[0], startPoint[1]),\r\n            new TMap.LatLng(endPoint[0], endPoint[1])\r\n        ];\r\n        var distance = TMap.geometry.computeDistance(pointSE);\r\n        var ctpath = __spreadArray(__spreadArray([], pointSE, true), [new TMap.LatLng(rt[0], rt[1]),\r\n            new TMap.LatLng(lb[0], lb[1]),], false);\r\n        // 使用百度地图的点位 出现报错\r\n        var cent = '';\r\n        try {\r\n            cent = TMap.geometry.computeCentroid(ctpath);\r\n        }\r\n        catch (_a) {\r\n            cent = undefined;\r\n        }\r\n        return { distance: distance.toFixed(2), cent: cent };\r\n    }\r\n    // 调整中心点和展示区域\r\n    function setCenterAndZoom(tags) {\r\n        var distance = tags.distance, cent = tags.cent;\r\n        console.log(distance, cent);\r\n        if (cent) {\r\n            console.log(2, distance, cent);\r\n            map.setCenter(cent);\r\n        }\r\n        if (distance) {\r\n            var comZoom = 10;\r\n            if (distance < 80) {\r\n                comZoom = 16;\r\n            }\r\n            else if (80 < distance && distance < 1000) {\r\n                comZoom = 15;\r\n            }\r\n            else if (1000 < distance && distance < 3000) {\r\n                comZoom = 14;\r\n            }\r\n            else if (3000 < distance && distance < 7000) {\r\n                comZoom = 13;\r\n            }\r\n            else if (7000 < distance && distance < 15000) {\r\n                comZoom = 12;\r\n            }\r\n            else {\r\n                comZoom = 10;\r\n            }\r\n            map.setZoom(comZoom);\r\n        }\r\n    }\r\n}\r\n","references":[]}
